import copy
from colorama import Fore, Style
from idor_utils import *

from bs4 import BeautifulSoup


def get_sudoku(id_partita):

    # Effettuiamo il login con un utente gi√† esistente, e otteniamo la sessione
    session = login_idor()
    
    # Otteniamo tramite richiesta get la partita dell'admin 
    response = session.get(f'http://{indirizzo_servizio}:8000/sudoku?id={id_partita}')
    
    # Se la partita √® stata trovata
    if response.ok:
        # Utilizziamo BeautifulSoup di bs4 per poter ottenere la griglia
        # poich√© la griglia per poter essere renderizzata non √® un oggetto JSON
        # ma √® gestita direttamente nel template
        soup = BeautifulSoup(response.text, 'html.parser')
        
        celle = soup.select('#sudoku-grid .sudoku-cell input')
        
        griglia = []
        riga = []
        lista_zeri = []
        colonna = 0

        # Per ogni cella, recuperiamo il valore 
        # e lo scriviamo nella griglia
        # Salviamo anche le celle che hanno degli zeri al loro interno
        for i, cella in enumerate(celle):
            valore = cella.get('value')
            if valore:
                riga.append(int(valore))
            else:
                riga.append(0)
                lista_zeri.append((len(griglia), colonna))
            
            colonna += 1
            # Se la lunghezza della riga √® pari a 9 significa che 
            # si √® arrivati alla fine e si va alla riga successiva 
            if len(riga) == 9:
                griglia.append(riga)
                riga = []
                colonna = 0


        return session, griglia, lista_zeri
    
    else:
        print(f"Errore nel recupero della griglia! CDS: {response.status_code}")
        return None, session



def risolvi_sudoku(griglia):

    if risolutore_idor(griglia):
        for riga in griglia:
            print(riga)
        return True
    else:
        print("Nessuna soluzione trovata.")
        return None



def submit_sudoku_solution(session, id_partita, griglia, lista_zeri):
    """ Invia la soluzione risolta al server tramite una richiesta POST """
    
    url_submit = f'http://{indirizzo_servizio}:8000/sudoku?id={id_partita}'
    
    while lista_zeri:
        (riga, colonna) = lista_zeri.pop()
        numero = griglia[riga][colonna]
        payload = {
            'id_partita': id_partita,
            'griglia' : griglia,
            'azione' : None,
            'riga' : riga,
            'colonna' : colonna,
            'numero' : numero
        }

        print('ID: ', payload['id_partita'])
        print('Azione:', payload['azione'])
        print('Riga:', payload['riga'])
        print('Colonna: ', payload['colonna'])
        print('Numero: ', payload['numero'])
        print('Griglia: ', payload['griglia'])

        response = session.post(url_submit, json=payload)
        
        if response.ok:
            print("Numero inviato con successo!")
            print("Risposta del server:", response.text)
        else:
            print(f"Errore nell'invio del numero! CDS: {response.status_code}")
            print("Messaggio del server:", response.text)


    # Creiamo il payload con i dati della griglia risolta
    payload = {
        'id_partita' : id_partita,
        'griglia': griglia,  # Flask dovrebbe aspettarsi un JSON con la griglia
        'azione' : 'controlla_validita',
        'riga' : None,
        'colonna' : None,
        'numero' : None
    }
        
    response = session.post(url_submit, json=payload)
        
    if response.ok:
        print("Soluzione inviata con successo!")
        print("Risposta del server:", response.text)
        response_json = response.json()
        print(f"Hai trovato la tua flagüéâ: {Fore.GREEN}{response_json.get('flag')}{Style.RESET_ALL}")
    else:
        print(f"Errore nell'invio della soluzione! CDS: {response.status_code}")
        print("Messaggio del server:", response.text)



if __name__ == "__main__":
    #register_idor()

    id_partita = 99
    session, griglia, lista_zeri = get_sudoku(id_partita)
    if griglia: 
        print("Griglia ottenuta, procedo alla stampa...")
        for riga in griglia:
            print(riga)
    else:
        print("Non √® stato possibile ottenere la griglia")

    print('---------------------------')
    print("Lista degli zeri nella griglia incompleta: ", lista_zeri)

    griglia_soluzione = copy.deepcopy(griglia)
    print('---------------------------')
    print('Risoluzione griglia incompleta e stampa...')

    if risolvi_sudoku(griglia_soluzione):
        print('Risoluzione completata correttamente!')
    else:
        print('Ops! Qualcosa √® andato storto nella risoluzione del sudoku...')

    submit_sudoku_solution(session, id_partita, griglia_soluzione, lista_zeri)


    # L'idea √® quella di prendere la lista dove sono presenti gli zeri,
    # per poter mandare richieste post con i numeri di riga e colonne specificate,
    # per completare il sudoku
    # Quando saranno finiti gli zeri, si mander√† una richiesta di convalida
    # e li si otterr√† una flag